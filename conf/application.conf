bootstrap-play2 {
  profile = "slick.jdbc.PostgresProfile$"
  database = {

    urlPrefix = "jdbc:postgresql://"
    urlPrefix = ${?URL_PREFIX}

    # Database Host
    host = "localhost"
    host = ${?DATABASE_HOST}

    # Database DB Name
    db = "test"
    db = ${?DATABASE_DB}

    # Database Port
    port = "5432"
    port = ${?DATABASE_PORT}

    url = ${?bootstrap-play2.database.urlPrefix}""${?bootstrap-play2.database.host}":"${?bootstrap-play2.database.port}"/"${?bootstrap-play2.database.db}
    url =  ${?DATABASE_URL}

    # Database User and Password
    user = "test"
    user = ${?DATABASE_USER}
    password = "test"
    password = ${?DATABASE_PASSWORD}

    // -- SETTINGS --

    driver = org.postgresql.Driver

    queueSize = 100

    numThreads = 4
    maxThreads = 4
    maxConnections = 8

    connectionTimeout = 7000
    validationTimeout = 7000
  }
}

smithy4play.autoRoutePackage = "de.innfactory.bootstrapplay2"

// ERROR HANDLER

# Override default error handler
play.http.errorHandler = "de.innfactory.bootstrapplay2.commons.errors.ErrorHandler"

// FIREBASE

firebase.file = "firebase.json"
firebase.file = ${?FIREBASE_FILEPATH}

// PLAY SECRET

play.http.secret.key = "KE;PMNWm/SGwA?IU=OqznzyyR7hFFpET0:z=rjBl:aI4UY@@Ji_mia/>Ai9@9rRR"
play.http.secret.key = ${?PLAY_HTTP_SECRET_KEY}

// FILTERS

play.filters.enabled = ["de.innfactory.bootstrapplay2.filters.TracingFilter", "de.innfactory.bootstrapplay2.filters.logging.AccessLoggingFilter", "play.filters.cors.CORSFilter", "de.innfactory.bootstrapplay2.filters.access.RouteBlacklistFilter" ]

play.filters.cors {
  pathPrefixes = ["/v1/"]
  allowedOrigins = null
  allowedHttpMethods = ["GET", "POST", "PUT", "PATCH", "DELETE", "HEAD"]
  preflightMaxAge = 3 days
  supportCredentials = true
  exposedHeaders = ["Access-Control-Allow-Origin"]
}

// Access Logging (Which http status codes should be logged)

logging.access.statusList = [404,403,401]
logging.access.statusList = ${?LOGGING_STATUSLIST}

http.port = 8080

project.id = "bootstrap-play2"
project.id = ${?PROJECT_ID}

keycloak {
    clientSecret = ""
    clientSecret = ${?KEYCLOAK_CLIENT_SECRET}
    clientId = ""
    clientId = ${?KEYCLOAK_CLIENT_ID}
    url = ""
    url = ${?KEYCLOAK_URL}
    basePath = ""
    basePath = ${?KEYCLOAK_BASE_PATH}
    authRealm = "dev"
    authRealm = ${?KEYCLOAK_REALM}
    realm = "dev"
    realm = ${?KEYCLOAK_REALM}
}

opencensus-scala {
  trace {
    sampling-probability = 1
  }
}

// Akka cluster

akka.serialization.jackson {
    jackson-modules += "com.fasterxml.jackson.datatype.joda.JodaModule"
    jackson-modules += "de.innfactory.familotel.adcenter.commons.jackson.JsValueDeSerializerModule"
}

akka.cluster.seed-nodes = [ ]
akka.cluster.seed-nodes = ${?AKKA_SEED_NODES}

akka {
  loglevel = "INFO"
  actor {
    provider = "cluster"
    debug.receive = false
  }
  cluster {
    downing-provider-class = "akka.cluster.sbr.SplitBrainResolverProvider"
    shutdown-after-unsuccessful-join-seed-nodes = 60s
  }
}


akka.cluster.log-info-verbose = off

akka.management {
  cluster.bootstrap {
    contact-point-discovery {
      discovery-method = kubernetes-api
    }
  }
}
akka.discovery {
  kubernetes-api {
    pod-namespace = "dev"
    pod-namespace = ${?NAMESPACE}
    pod-label-selector = "appName=bootstrapplay2"
  }
}

akka.actor {
    allow-java-serialization = off
    serializers {
        jackson-json-event = "akka.serialization.jackson.JacksonJsonSerializer"
    }
    serialization-identifiers {
        jackson-json-event = 9001
    }
    serialization-bindings {
      "de.innfactory.familotel.adcenter.infrastructure.actorsystem.PersistenceSerializable" = jackson-json
      "play.api.libs.json.JsValue" = jackson-json
     }
}